###################
##### T O D O #####

#### app client ####

## android ##
- java -> kotlin (services, activity, utils)

+ FcmService data push parsing
-- onRefresh - send broadcast to FlutterActivity
++ onCall - start CallReceiveActivity, put name

- CallFgService tray notification name, dismiss/answer

- MethodChannel for commands from native
-- transit dismiss/answer from CallReceiveActivity
-- refresh command from FcmService (broadcast receiver)

- notification channels (call, refresh) with priority
- awake after push even in doze mode
- handshake when receive call (what if call notification is expired?)

## flutter ##
+ MainScreen
+ router
- refresh event
+ avatar stub
+ contacts stub

+ CallSendScreen
-- стиль появиления экрана
-- анимированный перенос выбранного контакта
+ анимация звонка

+ http client flutter

#### backend ####
- нах бэкенд? Firestore

+ api getUsers, register(user), call(from, to)
- api answer/dismiss/cancel(from, to)

-- after register don't send push refresh to just registred

#### else ####
- add crashlytics
- on call receive animate something
- add native android LogUtil
-- wrap it into flutter plugin
-- send logs from flutter to native via MethodChannel
+ themes, styles

- TODO НАЛАДЬ ГИТ ЧТО БЫ ПОКАЗЫВАЛ КОММИТЫ

##### T O D O #####
###################




###################
##### D O N E #####

+ перенести со старого проекта
+ подключить к новому firebase
+ завести репо
+ сделать флоу-диаграмму архитектуры
+ прикрепить к гитхабовскому ридми

+ CallReceiveScreen native

+ user entity(token, name, color)
+ random name generation
+ stub 'users' response
+ avatar widget
+ storage


##### D O N E #####
###################




###############################
##### C O D E T H R A S H #####

RemoteViews remote = new RemoteViews(getPackageName(), R.layout.notification_call);
remote.setTextViewText(R.id.title, intent.getStringExtra("title"));
remote.setTextViewText(R.id.message, intent.getStringExtra("body"));
remote.setOnClickPendingIntent(R.id.btn_dismiss, obtainIntent(this, CALL_DISMISS));
remote.setOnClickPendingIntent(R.id.btn_answer, obtainIntent(this, CALL_ANSWER));

static final List<int> _textColors = [0xFFF44336, 0xFFe91e63, 0xFF9C27B0, 0xFF673AB7,
  0xFF3F51B5, 0xFF2196F3, 0xFF03A9F4, 0xFF00BCD4, 0xFF009688,
  0xFF4CAF50, 0xFF8BC34A, 0xFFFF9800, 0xFFFF5722, 0xFF607D8B];

static final List<int> _bcgColors = _textColors
    .map((color) => Color.alphaBlend(Colors.white70, Color(color)))
    .map((color) => color.value)
    .toList();

ThemeData(
    // Define the default brightness and colors.
    brightness: Brightness.dark,
    primaryColor: Colors.lightBlue[800],
    accentColor: Colors.cyan[600],

    // Define the default font family.
    fontFamily: 'Georgia',

    // Define the default TextTheme. Use this to specify the default
    // text styling for headlines, titles, bodies of text, and more.
    textTheme: TextTheme(
      headline: TextStyle(fontSize: 72.0, fontWeight: FontWeight.bold),
      title: TextStyle(fontSize: 36.0, fontStyle: FontStyle.italic),
      body1: TextStyle(fontSize: 14.0, fontFamily: 'Hind'),
    ),
  )

/*
SizedBox(height: 32),
user == null ? ownStub() : ownInfoBlock(user),
SizedBox(height: 32),
haveContacts() ? contactsStub() : contactsBlock(contacts)

  List<Widget> contactsBlock(List<User> contacts) {
  List<Widget> result = List();
  contacts.forEach((user) => result.add(getContactWidget(user)));
  return result;
}
*/

  //TODO: переписать на RxDart
  Future updateUser() async {
    return fcmService.initialize()
        .then((token) {
          print('@@@@@ f.FcmService TOKEN: $token');
          if (storage.get('user') == null) {
            setState(() => _user = User.generate(token));
            storage.set('user', _user.toJson());
            return client.register(_user);
          } else {
            setState(() => _user = User.fromJson(json.decode(storage.get('user'))));
            return Future.value(null);
          }
        });
  }

  Future updateAllUsers() {
    return client.getUsers().then((users) {
      if (users.isEmpty) users..add(_user)..add(STUB_USER);
      else if (users.length == 1 && users.contains(_user)) users.add(STUB_USER);
      else {
        if (users.indexOf(_user) >= 0) users..remove(_user)..insert(0, _user);
        else users.insert(0, STUB_USER);
      }
      setState(() => _allUsers = users);
    });
  }

ClipOval(
  child: Material(
    color: Colors.blue, // button color
    child: InkWell(
      splashColor: Colors.red, // inkwell color
      child: SizedBox(width: 56, height: 56, child: Icon(Icons.menu)),
      onTap: () {},
    ),
  ),
)

##### C O D E T H R A S H #####
###############################