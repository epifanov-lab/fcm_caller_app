###################
##### T O D O #####

#### app client ####
## android ##
- java -> kotlin (services, activity, utils)
- FcmService data push parsing
-- onRefresh - send broadcast to FlutterActivity
-- onCall - start CallReceiveAct., put name
- CallFgService tray notification name, dismiss/answer
- MethodChannel for commands from native
-- transit dismiss/answer from CallReceiveActivity
-- refresh command from FcmService (broadcast receiver)
- notification channels (call, refresh) with priority
- awake after push even in doze mode
- handshake when receive call (what if call notification is expired?)
## flutter ##
- MainScreen
- CallSendScreen
- dummy send data push 'refresh'
- dummy send data push 'call'
- user entity(token, name, color)
- random user generation
- stub 'users' response
- http client flutter

#### backend ####
- ... how ???
- api users, register(user), call(from, to)
- api answer/dismiss/cancel(from, to)
- erase bd

#### else ####
- add crashlytics
- label to ui flutter/native
- on call receive animate something
- add native android LogUtil
-- wrap it into flutter plugin
-- send logs from flutter to native via MethodChannel
- themes, styles, true dark mode

##### T O D O #####
###################




###################
##### D O N E #####

+ перенести со старого проекта
+ подключить к новому firebase
+ завести репо
+ сделать флоу-диаграмму архитектуры
+ прикрепить к гитхабовскому ридми

+ CallReceiveScreen native

##### D O N E #####
###################




###############################
##### C O D E T H R A S H #####

    RemoteViews remote = new RemoteViews(getPackageName(), R.layout.notification_call);
    remote.setTextViewText(R.id.title, intent.getStringExtra("title"));
    remote.setTextViewText(R.id.message, intent.getStringExtra("body"));
    remote.setOnClickPendingIntent(R.id.btn_dismiss, obtainIntent(this, CALL_DISMISS));
    remote.setOnClickPendingIntent(R.id.btn_answer, obtainIntent(this, CALL_ANSWER));

##### C O D E T H R A S H #####
###############################